// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Cube
{
    float3 position;
    float4 colour;
};

RWStructuredBuffer<Cube> cubes;
float resolution;
float repetitions;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

// Takes an xy input and gives a float (giving the same xy input will give the same random)
float rand(float2 co)
{
    return(frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453)) * 1;
}

[numthreads(10,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float xPos = id.x / resolution;
    Cube cube = cubes[id.x];

    for(int i=0; i<repetitions; ++i)
    {
        // Use xPos as it is a unique value for each cube
        float zPos = rand(float2(xPos, cube.position.z));
        cube.position.z = zPos;
        
        // Use interchanging variables to ensure randomness
        float r = rand(float2(cube.colour.r, cube.colour.g));
        float g = rand(float2(cube.colour.g, cube.colour.b));
        float b = rand(float2(cube.colour.b, cube.colour.r));

        cube.colour = float4(r,g,b,1.0);
    }
    cubes[id.x] = cube;
}