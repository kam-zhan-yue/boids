// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

struct Boid
{
    float3 position;
    float3 direction;
    float3 separationForce;
    float3 alignmentForce;
    float3 cohesionForce;
    float3 avoidanceForce;
    int groupId;
    uint predator;
};

RWStructuredBuffer<Boid> boids;
float visionRadius;
float visionAngle;
int boidNum;

bool CanSee(Boid boid1, Boid boid2)
{
    // Calculate the direction and difference vectors
    const float3 direction = boid1.direction;
    const float3 difference = boid2.position - boid1.position;

    // Check whether the distance is valid
    const float sqrDst = difference.x * difference.x + difference.y * difference.y + difference.z * difference.z;
    if(sqrDst > visionRadius * visionRadius)
        return false;
    
    // Calculate the dot product to get the cosine of the angle between vectors
    const float cosAngle = dot(direction, difference);
    // Calculate the angle between the vectors in degrees
    const float angle = acos(cosAngle) * (180.0 / 3.14159265359); // Convert radians to degrees
    // Check if the angle is within the vision angle
    return angle <= visionAngle * 0.5;
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // From https://forum.unity.com/threads/graphical-glitches-with-compute-shaders.1059680/
    // If the amount of data we are processing isn't an exact multiple of the number of threads,
    // we need to abort the execution on the excess threads.
    // Hence, make sure we are not executing on excess threads (safety measure)
    if (id.x >= boidNum)
        return;
    
    float3 totalCohesionForce;
    int nearbyBoids = 0;
    
    // For each boid, loop through every single other boid in the array
    for (int i = 0; i < boidNum; i ++)
    {
        // If both indexes are the same, then continue (they are the same boid)
        if (id.x == i) continue;
        
        const Boid boid2 = boids[i];
        // Continue if the boid is not perceivable
        if(!CanSee(boids[id.x], boid2)) continue;

        nearbyBoids++;
        // Calculate the offset and square distance
        float3 offset = boid2.position - boids[id.x].position;
        const float sqrDst = offset.x * offset.x + offset.y * offset.y + offset.z * offset.z;

        // Only simulate separation, alignment, and cohesion if in the same group
        if(boids[id.x].groupId == boid2.groupId)
        {
            boids[id.x].separationForce -= offset / sqrDst;
            boids[id.x].alignmentForce += boid2.direction;
            totalCohesionForce += boid2.position;
        }

        // Simulate avoidance force if predator relationship is valid
        if(!boids[id.x].predator && boid2.predator)
        {
            boids[id.x].avoidanceForce -= offset/sqrDst;
        }
    }

    // Readjust the cohesion force
    if(nearbyBoids > 0)
        boids[id.x].cohesionForce = totalCohesionForce / nearbyBoids - boids[id.x].position;
}
