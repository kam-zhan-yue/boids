// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

struct Boid
{
    float3 position;
    float3 direction;
    float3 separationForce;
    float3 alignmentForce;
    float3 cohesionForce;
    float3 avoidanceForce;
    int groupId;
    uint predator;
};

RWStructuredBuffer<Boid> boids;
float visionRadius;
float visionAngle;
int boidNum;

// Simple check to see if the boids are within distance of each other
// TODO: need to extend this to allow for vision angle
bool canSee(Boid boid1, Boid boid2)
{
    float3 difference = boid2.position - boid1.position;
    float sqrDistance = difference.x * difference.x + difference.y * difference.y + difference.z * difference.z;
    return sqrDistance < visionRadius * visionRadius;
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // From https://forum.unity.com/threads/graphical-glitches-with-compute-shaders.1059680/
    // If the amount of data we are processing isn't an exact multiple of the number of threads,
    // we need to abort the execution on the excess threads.
    // Hence, make sure we are not executing on excess threads (safety measure)
    if (id.x >= boidNum)
        return;
    
    float3 totalCohesionForce;
    // For each boid, loop through every single other boid in the array
    for (int i = 0; i < boidNum; i ++)
    {
        // If both indexes are the same, then continue (they are the same boid)
        if (id.x == i) continue;
        
        const Boid boid2 = boids[i];
        // Continue if the boid is not perceivable
        if(!canSee(boids[id.x], boid2)) continue;;
        

        float3 offset = boid2.position - boids[id.x].position;
        const float sqrDst = offset.x * offset.x + offset.y * offset.y + offset.z * offset.z;

        // Only simulate separation, alignment, and cohesion if in the same group
        if(boids[id.x].groupId == boid2.groupId)
        {
            boids[id.x].separationForce -= offset / sqrDst;
            boids[id.x].alignmentForce += boid2.direction;
            totalCohesionForce += boid2.position;
        }

        // Simulate avoidance force if predator relationship is valid
        if(!boids[id.x].predator && boid2.predator)
        {
            boids[id.x].avoidanceForce -= offset/sqrDst;
        }
    }

    // Readjust the cohesion force
    boids[id.x].cohesionForce = totalCohesionForce / boidNum - boids[id.x].position;
}
